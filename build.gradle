buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: 'official', version: '1.17.1'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.17.1-37.1.1'
}

processResources {

    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    inputs.property "mod_id", "${mod_id}"
    inputs.property "mod_name", "${mod_name}"
    inputs.property "mod_version", "${mod_version}"
    inputs.property "mod_url", "${mod_url}"
    inputs.property "mod_description", "${mod_description}"
    inputs.property "mod_author", "${mod_author}"
    inputs.property "mod_updateurl", "${mod_updateurl}"
    inputs.property "mc_version", "${mc_version}"
    inputs.property "forge_version", "${forge_version}"

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        include 'pack.mcmeta'

        expand(
                "mod_id": "${mod_id}",
                "mod_name": "${mod_name}",
                "mod_version": "${mod_version}",
                "mod_url": "${mod_url}",
                "mod_description": "${mod_description}",
                "mod_author": "${mod_author}",
                "mod_updateurl": "${mod_updateurl}",
                "mc_version": "${mc_version}",
                "forge_version": "${forge_version}"
        )
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml', 'pack.mcmeta'
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_name}",
                "Specification-Version"   : "1.0", // We are version 1.0 of ourselves
                "Specification-Vendor"    : "${mod_author}",
                "Implementation-Title"    : "${mod_name}",
                "Implementation-Version"  : "${mod_version}",
                "Implementation-Vendor"   : "${mod_author}",
                "Implementation-Vendor-Id": "${mod_group}",
                "Implementation-URL"      : "${mod_url}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    archiveName "${mod_name}-v${mod_version}-${mc_version}.jar"
}

jar.finalizedBy('reobfJar')